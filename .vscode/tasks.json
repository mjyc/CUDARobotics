{
    "version": "2.0.0",
    "tasks": [
      {
        "label": "Bazel: Generate compile_commands.json",
        "type": "shell",
        "command": "bazel-compdb",
        "problemMatcher": [],
      },
      {
        "label": "Bazel: Build",
        "type": "shell",
        "command": "CC=clang bazel build ${relativeFileDirname}:${fileBasenameNoExtension}",
        "dependsOn": [
          "Bazel: Generate compile_commands.json"
        ],
        "group": {
          "kind": "build",
          "isDefault": true,
        },
      },
      {
        "label": "Bazel: Build (debug)",
        "type": "shell",
        "command": "CC=clang bazel build -c dbg ${relativeFileDirname}:${fileBasenameNoExtension}",
        "dependsOn": [
          "Bazel: Generate compile_commands.json"
        ],
      },
      {
        "label": "Bazel: Run",
        "type": "shell",
        "command": "CC=clang bazel run ${relativeFileDirname}:${fileBasenameNoExtension}",
        "problemMatcher": [],
      },
      {
        "label": "Bazel: Run (debug)",
        "type": "shell",
        "command": "CC=clang bazel run -c dbg ${relativeFileDirname}:${fileBasenameNoExtension}",
        "problemMatcher": [],
      },
      {
        "label": "Bazel: Run (opt)",
        "type": "shell",
        "command": "CC=clang bazel run -c opt ${relativeFileDirname}:${fileBasenameNoExtension}",
        "problemMatcher": [],
      },
      {
        "label": "iBazel: Run",
        "type": "shell",
        "command": "CC=clang ibazel run ${relativeFileDirname}:${fileBasenameNoExtension}",
        "problemMatcher": [],
        "dependsOn": [
          "Bazel: Generate compile_commands.json"
        ],
      },
      {
        "label": "iBazel: Create Plot (use this with simulate.cpp)",
        "type": "shell",
        "command": "CC=clang ibazel -run_command_after_success='.scripts/${relativeFileDirname}/${fileDirnameBasename}.py .scripts/${relativeFileDirname}/${fileDirnameBasename}.log .scripts/${relativeFileDirname}/${fileDirnameBasename}.png' run ${relativeFileDirname}:${fileBasenameNoExtension} -- $(pwd)/.scripts/${relativeFileDirname}/${fileDirnameBasename}.log",
        "problemMatcher": [],
        "dependsOn": [
          "Bazel: Generate compile_commands.json"
        ],
      }
    ]
}